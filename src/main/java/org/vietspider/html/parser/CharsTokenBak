/*
 * Copyright 2004-2006 The VietSpider        All rights reserved.
 *
 * Created on January 24, 2006, 7:50 PM
 */

package org.vietspider.html.parser;

import org.vietspider.chars.CharsUtil;
import org.vietspider.html.HTMLDocument;
import org.vietspider.html.Name;
import org.vietspider.token.TokenParser;
import org.vietspider.token.TypeToken;
import org.vietspider.token.TokenParser.Factory;
/**
 *
 * @author nhuthuan
 * Email: nhudinhthuan@yahoo.com
 */
public class CharsTokenBak extends Factory<NodeImpl> { 
  
  public final static Object [] PARAMS = {
    new char[]{'s','c','r','i','p','t'},
    new char[] {'s','t','y','l','e'}
  };
  
//  private char [] script = {'s','c','r','i','p','t'};
//  private char [] style = {'s','t','y','l','e'};
  
  private HTMLDocument document;
  
  public void setDocument(HTMLDocument document) { this.document = document; }
  
  //params[0]: char [] script = {'s','c','r','i','p','t'};
  //params[1]: char [] style = {'s','t','y','l','e'};
  //params[2]: set replace
  @SuppressWarnings("unused")
  public int create(char [] data, int start, int end, int type, Object...params){ 
    if(start >= end) return end;
    if(start > data.length) return data.length;   
    char [] value = CharsUtil.cutAndTrim(data, start, Math.min(end, data.length)); 
   
//    NodeConfig config = null;
    Name name;
    if(value.length < 1) return end;
    
    if(type != TypeToken.TAG){     
      name = type == TypeToken.COMMENT ? Name.COMMENT : Name.CONTENT;
      push(new NodeImpl(value, name));
      return end;
    }
    
    if(value[0] == '/'){
      if(value.length <= 1) return end;     
      value  = CharsUtil.cutAndTrim(value, 1, value.length);
      name = HTML.getName(new String(value).toUpperCase());
      if(name != null){
        push(new NodeImpl(value, name, TypeToken.CLOSE));
      }else{
        char [] newValue = new char[value.length+1];
        newValue[0] = '/'; 
        System.arraycopy(value, 0, newValue, 1, value.length);
        push(new NodeImpl(newValue, Name.UNKNOWN));
        return end;
      }
      return end;
    }
    
    String nameValue = new String(CharsUtil.cutBySpace(value, 0)).toUpperCase();
    if(nameValue.charAt(nameValue.length()-1) == '/'){      
      nameValue = nameValue.substring(0, nameValue.length()-1).trim();      
    }   
    
    if(nameValue.equals("!DOCTYPE")){
      if(document != null) document.setDoctype(new NodeImpl(value, Name.DOCTYPE));
      return end;
    }
    
    name = HTML.getName(nameValue); 
    if(name != null){
      push(new NodeImpl(value, name, TypeToken.TAG));    
    }else{
      push(new NodeImpl(value, Name.UNKNOWN));
      return end;
    }
    if(name == Name.SCRIPT){
      return findEndScript(data, new char[]{'s','c','r','i','p','t'}, end);
    } else if(name == Name.STYLE){
      return findEndScript(data, new char[] {'s','t','y','l','e'}, end);
    }
    return end;
  }  

  private int findEndScript(char [] value, char [] c, int start){    
    int [] idx = indexEndNode(value, c, start);   
    if(idx.length < 1) return start;   
    create(value, start+1, idx[0], TypeToken.CONTENT);    
    return create(value, idx[1], idx[2], TypeToken.TAG);
  }  
 
  private int[] indexEndNode(char [] values, char [] c, int start){
    boolean is = false;
    int [] idx = new int[3];
    for(int i = start; i < values.length; i++) {
      if(values[i] != '<') continue;
      
      is = true;
      idx[0] = i;
      int k = i+1;
      
      TokenParser tokenParser = new TokenParser();
      
      if(values[k] == '!'
          && tokenParser.isStartSpecToken(values, new char[]{'-', '-'}, k)) {
        System.out.println(values.hashCode());
        values = insert(values, i, "&lt;".toCharArray());
        System.out.println(values.hashCode());
        i += 4;
        continue;
//        int startComment = k;          
//        int endComment  = tokenParser.findEndSpecToken(values, new char[]{'-', '-', '>'}, k);
//        startComment = (startComment - 1) > values.length ? values.length : endComment;
//        if(startComment < values.length  && values[startComment] == '<') {
//          i = startComment - 1;  
//          continue;
//        }
//        break;
      }
      
      while(k < values.length){
        if(values[k] == '/')  idx[1] = k;
        if(values[k] != '/' && !Character.isWhitespace(values[k])) break;
        k++;
      }
      
      for(int j = 0; j < c.length; j++){
        if(k+j >= values.length - 1){
          is = false;
          break;
        }
        
        if(c[j] == Character.toLowerCase(values[k+j])) continue;
        is = false;
        break;
      }    
      
      if(!is) continue;                
      
      k += c.length;   
      while(k < values.length){
        if(values[k] != '/' && !Character.isWhitespace(values[k])) break;
        k++;
      }  
      if(k >= values.length) return new int[0];
      idx[2] = k;
      if(values[k] == '>') return idx;
    }
    return new int[0];
  }
  
  private char[] insert(char [] data, int start, char [] values) {
    char [] newData = new char[data.length + values.length];
    System.arraycopy(data, 0, newData, 0, start);
    System.arraycopy(values, 0, newData, start, values.length);
    System.arraycopy(data, start, newData, start+values.length, data.length-start);
    return newData;
  }
  
//  private int endComment(char [] data, int start, int end) {
//    if(start >= end) return end;
//    if(start > data.length) return data.length;   
//    CharsUtil.cutAndTrim(data, start, Math.min(end, data.length)); 
//    return end;
//  }

}
